apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'realm-android'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "vn.impl.projectbase"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    dataBinding {
        enabled = false
    }

    buildTypes {
        debug {
            minifyEnabled false

            versionNameSuffix "-" + getDate()
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions 'root'
    productFlavors {
        product {
            dimension 'root'
        }

        dev {
            dimension 'root'
            applicationIdSuffix '.dev'
        }
    }

    sourceSets {
        product.resources.srcDirs = ['src/product/res']
        dev.resources.srcDirs = ['src/dev/res']
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$rootProject.ext.kotlin_version"

    implementation "androidx.appcompat:appcompat:$rootProject.ext.lib_versions.appcompat"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.ext.lib_versions.constraint_layout"
    implementation "androidx.multidex:multidex:$rootProject.ext.lib_versions.multidex"
    implementation "com.google.android.material:material:$rootProject.ext.lib_versions.material"
    implementation "androidx.annotation:annotation:$rootProject.ext.lib_versions.annotation"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.ext.lib_versions.lifecycle_extensions"

    //rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.ext.lib_versions.rxjava"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.ext.lib_versions.rxkotlin"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.ext.lib_versions.rxandroid"

    //dagger2
    implementation "com.google.dagger:dagger:$rootProject.ext.lib_versions.dagger2"
    kapt "com.google.dagger:dagger-compiler:$rootProject.ext.lib_versions.dagger2"
    implementation "com.google.dagger:dagger-android:$rootProject.ext.lib_versions.dagger2"
    implementation "com.google.dagger:dagger-android-support:$rootProject.ext.lib_versions.dagger2"
    // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$rootProject.ext.lib_versions.dagger2"

    //retrofit2
    implementation "com.squareup.retrofit2:retrofit:$rootProject.ext.lib_versions.retrofit2"
    implementation "com.squareup.retrofit2:converter-moshi:$rootProject.ext.lib_versions.retrofit2"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$rootProject.ext.lib_versions.retrofit2"

    //moshi
    implementation "com.squareup.moshi:moshi:$rootProject.ext.lib_versions.moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$rootProject.ext.lib_versions.moshi"

    //okhttp3
    implementation "com.squareup.okhttp3:okhttp:$rootProject.ext.lib_versions.okhttp3"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.ext.lib_versions.okhttp3"

    //chucker
    debugImplementation "fr.o80.chucker:library-no-op:$rootProject.ext.lib_versions.chucker"
    releaseImplementation "fr.o80.chucker:library-no-op:$rootProject.ext.lib_versions.chucker"

    //glide
    implementation "com.github.bumptech.glide:glide:$rootProject.ext.lib_versions.glide"
    kapt "com.github.bumptech.glide:compiler:$rootProject.ext.lib_versions.glide"


    testImplementation "junit:junit:$rootProject.ext.lib_versions.junit"
    androidTestImplementation "androidx.test:runner:$rootProject.ext.lib_versions.test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.ext.lib_versions.espresso_core"
}

static def getDate() {
    def date = new Date()
    return date.format("yyyyMMddhhmm")
}
